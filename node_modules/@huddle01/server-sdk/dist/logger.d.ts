type LogLevel = "trace" | "debug" | "info" | "warn" | "error" | "silent";
interface Logger {
    trace(...args: any[]): void;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
}
interface WrappedLogger extends Logger {
    init(): void;
    level: LogLevel | undefined;
    logger: Logger;
}
type LoggerFactory = () => Logger;
declare const createLogger: (moduleName: string, logLevel?: LogLevel) => WrappedLogger;
declare const setLogLevel: (level: LogLevel) => void;
declare const setLoggerFactory: (loggerFactory: LoggerFactory) => void;
declare const mainLogger: {
    createSubLogger: (moduleName: string) => WrappedLogger;
};

export { type LogLevel, type Logger, type LoggerFactory, type WrappedLogger, createLogger, mainLogger, setLogLevel, setLoggerFactory };
