// src/webhooks/WebhookReceiver.ts
import crypto from "crypto";
var WebhookReceiver = class {
  #config;
  constructor(config) {
    this.#config = config;
  }
  receive(body, header) {
    const timestamp = header?.split(",")[0]?.split("=")?.[1];
    const signature = header?.split(",")[1];
    if (!timestamp || !signature)
      throw new Error("Invalid headers");
    let data;
    if (typeof body === "string")
      data = JSON.parse(body);
    else if (typeof body === "object")
      data = body;
    else
      throw new Error("Invalid body");
    if (!data.id)
      throw new Error("Invalid body");
    const hashPayload = `${data.id}.${timestamp}.${JSON.stringify(data)}`;
    const signatureAlgorithm = signature.split("=")[0];
    if (!signatureAlgorithm)
      throw new Error("Invalid signature algorithm");
    const hmac = crypto.createHmac(signatureAlgorithm, this.#config.apiKey);
    const digest = Buffer.from(
      `${signatureAlgorithm}=${hmac.update(hashPayload).digest("hex")}`,
      "utf8"
    );
    const providerSig = Buffer.from(signature, "utf8");
    if (providerSig.length !== digest.length || !crypto.timingSafeEqual(digest, providerSig)) {
      throw new Error("Invalid signature");
    }
    return data;
  }
  /**
   * Helper function to create a typed webhook data object
   */
  createTypedWebhookData(event, data) {
    return { event, data };
  }
};

export {
  WebhookReceiver
};
