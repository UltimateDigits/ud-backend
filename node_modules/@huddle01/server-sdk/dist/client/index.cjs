"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } var _class;

var _chunkA324YZTZcjs = require('../chunk-A324YZTZ.cjs');
require('../chunk-AITBUDWZ.cjs');

// src/client/index.ts
var _zod = require('zod');
var _axios = require('axios'); var _axios2 = _interopRequireDefault(_axios);
var produceSourcesSchema = _zod.z.array(
  _zod.z.union([_zod.z.literal("cam"), _zod.z.literal("mic"), _zod.z.literal("screen")])
);
var PermissionSchema = _zod.z.object({
  admin: _zod.z.boolean(),
  canConsume: _zod.z.boolean(),
  canProduce: _zod.z.boolean(),
  canProduceSources: produceSourcesSchema,
  canSendData: _zod.z.boolean(),
  canRecvData: _zod.z.boolean(),
  canUpdateMetadata: _zod.z.boolean()
});
var PeerDataSchema = _zod.z.object({
  peerId: _zod.z.string().min(1).max(100),
  permissions: PermissionSchema.partial(),
  metadata: _zod.z.string().optional()
});
var UpdatePeerPermissionSchema = _zod.z.object({
  peerId: _zod.z.string().min(1).max(100),
  roomId: _zod.z.string().min(1).max(100),
  role: _zod.z.union([
    _zod.z.literal("host"),
    _zod.z.literal("coHost"),
    _zod.z.literal("speaker"),
    _zod.z.literal("listener"),
    _zod.z.literal("guest"),
    _zod.z.string()
  ]).optional(),
  permissions: PermissionSchema.partial().optional()
});
var SendDataSchema = _zod.z.object({
  roomId: _zod.z.string().min(1).max(100),
  label: _zod.z.string().min(1).max(100).optional(),
  payload: _zod.z.string().min(1).max(280),
  peers: _zod.z.array(_zod.z.string().min(1).max(100)).optional(),
  admin: _zod.z.boolean().optional()
});
var logger = _chunkA324YZTZcjs.mainLogger.createSubLogger("Client");
var Client = (_class = class {
  
  
  
  
  constructor(data) {;_class.prototype.__init.call(this);_class.prototype.__init2.call(this);_class.prototype.__init3.call(this);
    logger.info("\u{1F514} Initializing Client Side SDK");
    this.__apiKey = data.apiKey;
    this.__projectId = data.projectId;
    if (this.__projectId === "development") {
      this.__url = "http://localhost:8000/api/v1";
    } else
      this.__url = "https://apira.huddle01.media/api/v1";
    this.__baseAxios = _axios2.default.create({
      baseURL: this.__url,
      headers: {
        "Content-Type": "application/json",
        "x-api-key": this.__apiKey
      }
    });
  }
  __init() {this.getPeerData = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/getPeerData",
        {
          peerId: data.peerId,
          roomId: data.roomId
        },
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const peerData = resp.data;
      return {
        data: peerData
      };
    } catch (error) {
      logger.error("\u274C Error In gettting Peer Data");
      logger.error(error);
      const err = new Error("Error In gettting Peer Data");
      return {
        data: null,
        error: err
      };
    }
  }}
  __init2() {this.updatePermission = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/updatePermission",
        data,
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const responseData = resp.data;
      if (responseData.status !== "ok") {
        throw new Error("Error In Updating Permission");
      }
      return {
        status: "ok"
      };
    } catch (error) {
      logger.error("\u274C Error In Updating Permission");
      logger.error(error);
      const err = new Error("Error In Updating Permission");
      return {
        status: null,
        error: err.message
      };
    }
  }}
  __init3() {this.sendData = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/sendData",
        data,
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const responseData = resp.data;
      if (responseData.status !== "ok") {
        throw new Error("\u274C Error In Sending Data");
      }
      return {
        status: "ok"
      };
    } catch (error) {
      logger.error("\u274C Error In Sending Data");
      logger.error(error);
      const err = new Error("Error In Sending Data");
      return {
        status: null,
        error: err.message
      };
    }
  }}
}, _class);





exports.Client = Client; exports.PeerDataSchema = PeerDataSchema; exports.PermissionSchema = PermissionSchema; exports.SendDataSchema = SendDataSchema;
