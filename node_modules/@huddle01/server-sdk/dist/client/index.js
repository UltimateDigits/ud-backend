import {
  mainLogger
} from "../chunk-YD27QE5C.js";
import "../chunk-VBXJIVYU.js";

// src/client/index.ts
import { z } from "zod";
import axios from "axios";
var produceSourcesSchema = z.array(
  z.union([z.literal("cam"), z.literal("mic"), z.literal("screen")])
);
var PermissionSchema = z.object({
  admin: z.boolean(),
  canConsume: z.boolean(),
  canProduce: z.boolean(),
  canProduceSources: produceSourcesSchema,
  canSendData: z.boolean(),
  canRecvData: z.boolean(),
  canUpdateMetadata: z.boolean()
});
var PeerDataSchema = z.object({
  peerId: z.string().min(1).max(100),
  permissions: PermissionSchema.partial(),
  metadata: z.string().optional()
});
var UpdatePeerPermissionSchema = z.object({
  peerId: z.string().min(1).max(100),
  roomId: z.string().min(1).max(100),
  role: z.union([
    z.literal("host"),
    z.literal("coHost"),
    z.literal("speaker"),
    z.literal("listener"),
    z.literal("guest"),
    z.string()
  ]).optional(),
  permissions: PermissionSchema.partial().optional()
});
var SendDataSchema = z.object({
  roomId: z.string().min(1).max(100),
  label: z.string().min(1).max(100).optional(),
  payload: z.string().min(1).max(280),
  peers: z.array(z.string().min(1).max(100)).optional(),
  admin: z.boolean().optional()
});
var logger = mainLogger.createSubLogger("Client");
var Client = class {
  __projectId;
  __apiKey;
  __url;
  __baseAxios;
  constructor(data) {
    logger.info("\u{1F514} Initializing Client Side SDK");
    this.__apiKey = data.apiKey;
    this.__projectId = data.projectId;
    if (this.__projectId === "development") {
      this.__url = "http://localhost:8000/api/v1";
    } else
      this.__url = "https://apira.huddle01.media/api/v1";
    this.__baseAxios = axios.create({
      baseURL: this.__url,
      headers: {
        "Content-Type": "application/json",
        "x-api-key": this.__apiKey
      }
    });
  }
  getPeerData = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/getPeerData",
        {
          peerId: data.peerId,
          roomId: data.roomId
        },
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const peerData = resp.data;
      return {
        data: peerData
      };
    } catch (error) {
      logger.error("\u274C Error In gettting Peer Data");
      logger.error(error);
      const err = new Error("Error In gettting Peer Data");
      return {
        data: null,
        error: err
      };
    }
  };
  updatePermission = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/updatePermission",
        data,
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const responseData = resp.data;
      if (responseData.status !== "ok") {
        throw new Error("Error In Updating Permission");
      }
      return {
        status: "ok"
      };
    } catch (error) {
      logger.error("\u274C Error In Updating Permission");
      logger.error(error);
      const err = new Error("Error In Updating Permission");
      return {
        status: null,
        error: err.message
      };
    }
  };
  sendData = async (data) => {
    try {
      const resp = await this.__baseAxios.post(
        "/sendData",
        data,
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      const responseData = resp.data;
      if (responseData.status !== "ok") {
        throw new Error("\u274C Error In Sending Data");
      }
      return {
        status: "ok"
      };
    } catch (error) {
      logger.error("\u274C Error In Sending Data");
      logger.error(error);
      const err = new Error("Error In Sending Data");
      return {
        status: null,
        error: err.message
      };
    }
  };
};
export {
  Client,
  PeerDataSchema,
  PermissionSchema,
  SendDataSchema
};
