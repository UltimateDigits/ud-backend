/**
 * API Classes deals with all the Hub realted API calls
 */
declare class API {
    #private;
    constructor(data: {
        apiKey: string;
    });
    /**
     * Create Room Registers a new room in the HUB, which can be used for the meetings
     * @param data - metadata and roomLocked
     * @throws Error if the room creation fails
     */
    createRoom: (data?: {
        roomLocked: boolean;
        metadata?: string;
    }) => Promise<{
        message: string;
        roomId: string;
    }>;
    /**
     * Get Rooms gives the list of rooms registered in the HUB
     * @throws Error if not able to get the rooms
     */
    getRooms: (data?: {
        limit?: number;
        cursor?: number;
    }) => Promise<{
        count: number;
        current: number;
        nextCursor: number | null;
        prevCursor: number | null;
        rooms: {
            roomId: string;
            startTime: string;
            endTime: string | null;
        }[];
    }>;
    /**
     * Get all the sessions for a particular roomId
     * @description - After Creating a room the same room can be used for multiple meetings, all the sessions for a particular room can be fetched using this API
     * @param data - {roomId: string}
     * @returns - List of meetings
     * @throws Error if not able to get the meetings
     */
    getLiveMeetings: (data?: {
        roomId?: string;
    }) => Promise<{
        roomId: string;
        startTime: string;
        bandwidthConsumed: number | null;
    }[]>;
    getMetrics: () => Promise<{
        livestreamCount: number;
        recordingCount: number;
        totalMeetings: number;
        totalDuration: number;
        totalUsers: number;
    }>;
    getRoomDetails: (data: {
        roomId: string;
    }) => Promise<{
        createdAt: string;
        updatedAt: string;
        devHubId: string;
        projectId: string;
        roomId: string;
        roomLocked: boolean;
    }>;
    /**
     * Get the participants details for a live meeting happening for a roomId
     * @description - Multiple sessions can happen on the same room, this API gives the details of the participants for a latest session
     * @param data - {roomId: string}
     * @returns - List of participants
     */
    getPartipantsDetails: (data: {
        roomId: string;
    }) => Promise<{
        metadata: never;
        peerId: string;
        joinTime: number;
    }[]>;
    /**
     * Get the list of all the sessions for a particular roomId - Same Room can be used for multiple sessions.
     * @param data - {roomId: string}
     * @returns - List of sessions
     */
    getRoomSessions: (data: {
        roomId: string;
        limit?: number;
        cursor?: number;
    }) => Promise<{
        sessionId: string;
        endTime: number | null;
        startTime: number;
    }[]>;
}

export { API };
