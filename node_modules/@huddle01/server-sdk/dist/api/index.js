import {
  mainLogger
} from "../chunk-YD27QE5C.js";
import {
  IRIKO_URL
} from "../chunk-5NLWQTRE.js";
import "../chunk-VBXJIVYU.js";

// src/api/index.ts
var logger = mainLogger.createSubLogger("API");
var API = class {
  __apiKey;
  constructor(data) {
    logger.info("\u{1F514} Initializing Server SDK APIs");
    this.__apiKey = data.apiKey;
  }
  getRooms = async () => {
    try {
      const resp = await fetch(`${IRIKO_URL}/api/v1/get-rooms`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.__apiKey
        }
      });
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching rooms");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching rooms")
      };
    }
  };
  getLiveMeetings = async () => {
    try {
      const resp = await fetch(`${IRIKO_URL}/api/v1/live-meetings`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.__apiKey
        }
      });
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching live meetings");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching live meetings")
      };
    }
  };
  getMetrics = async () => {
    try {
      const resp = await fetch(`${IRIKO_URL}/api/v1/get-metrics`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.__apiKey
        }
      });
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching API key metrics");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching API key metrics")
      };
    }
  };
  createRoom = async (data) => {
    try {
      const resp = await fetch(`${IRIKO_URL}/api/v1/create-room`, {
        method: "POST",
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.__apiKey
        }
      });
      if (resp.status === 401) {
        throw new Error("API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in creating room");
      logger.error(error);
      return {
        error: new Error("\u274C Error in creating room")
      };
    }
  };
  getRoomDetails = async (data) => {
    try {
      const resp = await fetch(
        `${IRIKO_URL}/api/v1/room-details/${data.roomId}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching room details");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching room details")
      };
    }
  };
  getRoomMeetings = async (data) => {
    try {
      const resp = await fetch(
        `${IRIKO_URL}/api/v1/rooms/meetings?roomId=${data.roomId}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching room meetings list");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching room meetings list")
      };
    }
  };
  getParticipants = async (data) => {
    try {
      const resp = await fetch(
        `${IRIKO_URL}/api/v1/rooms/participant-list?meetingId=${data.meetingId}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.__apiKey
          }
        }
      );
      if (resp.status === 401) {
        throw new Error("\u274C API key missing or invalid");
      }
      const res = await resp.json();
      return { data: res };
    } catch (error) {
      logger.error("\u274C Error in fetching meeting participants list");
      logger.error(error);
      return {
        error: new Error("\u274C Error in fetching meeting participants list")
      };
    }
  };
};
export {
  API
};
