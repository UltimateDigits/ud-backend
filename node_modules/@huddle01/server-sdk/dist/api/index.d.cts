import { ApiKeyRoomsSchema, LiveMeetingsDataSchema, ApiKeyMetricsSchema, CreateRoomInputSchema, CreateRoomDataSchema, RoomDetailsSchema, RoomMeetingsInputSchema, RoomMeetingsDataSchema, GetParticipantsInputSchema, GetParticipantsDataSchema } from '../types/api.types.cjs';
import 'zod';
import '../validators/api.validators.cjs';

type FunctionWithConditionalReturnType<TInput, TOutput> = TInput extends undefined ? () => Promise<{
    error: undefined;
    data: TOutput;
} | {
    data: undefined;
    error: Error;
}> : (input: TInput) => Promise<{
    error: undefined;
    data: TOutput;
} | {
    data: undefined;
    error: Error;
}>;
declare class API {
    private readonly __apiKey;
    constructor(data: {
        apiKey: string;
    });
    getRooms: FunctionWithConditionalReturnType<undefined, ApiKeyRoomsSchema>;
    getLiveMeetings: FunctionWithConditionalReturnType<undefined, LiveMeetingsDataSchema>;
    getMetrics: FunctionWithConditionalReturnType<undefined, ApiKeyMetricsSchema>;
    createRoom: FunctionWithConditionalReturnType<CreateRoomInputSchema, CreateRoomDataSchema>;
    getRoomDetails: FunctionWithConditionalReturnType<{
        roomId: string;
    }, RoomDetailsSchema>;
    getRoomMeetings: FunctionWithConditionalReturnType<RoomMeetingsInputSchema, RoomMeetingsDataSchema>;
    getParticipants: FunctionWithConditionalReturnType<GetParticipantsInputSchema, GetParticipantsDataSchema>;
}

export { API };
