'use strict';

var chunk7BWXXKA6_cjs = require('../chunk-7BWXXKA6.cjs');
var chunkUYXCM27V_cjs = require('../chunk-UYXCM27V.cjs');
require('../chunk-5G3D25PZ.cjs');

// src/api/index.ts
var logger = chunkUYXCM27V_cjs.mainLogger.createSubLogger("API");
var API = class {
  // API Key provided for the Registered HUB
  #apiKey;
  #infraClient;
  constructor(data) {
    this.#apiKey = data.apiKey;
    this.#infraClient = chunk7BWXXKA6_cjs.getInfraClient({
      apiKey: this.#apiKey
    });
  }
  /**
   * Create Room Registers a new room in the HUB, which can be used for the meetings
   * @param data - metadata and roomLocked
   * @throws Error if the room creation fails
   */
  createRoom = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk.rooms["create-room"].$post({
        json: {
          metadata: data?.metadata,
          roomLocked: data?.roomLocked
        }
      });
      if (resp.status !== 200) {
        throw new Error("Error creating room");
      }
      const { data: respData, message } = await resp.json();
      return {
        message,
        roomId: respData.roomId
      };
    } catch (error) {
      logger.error("Error in createRoom", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error creating room");
    }
  };
  /**
   * Get Rooms gives the list of rooms registered in the HUB
   * @throws Error if not able to get the rooms
   */
  getRooms = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk.rooms["get-rooms"].$get({
        query: {
          limit: data?.limit?.toString(),
          cursor: data?.cursor?.toString()
        }
      });
      if (resp.status !== 200) {
        throw new Error("Error getting rooms");
      }
      const { count, current, nextCursor, prevCursor, rooms } = await resp.json();
      return {
        count,
        current,
        nextCursor,
        prevCursor,
        rooms
      };
    } catch (error) {
      logger.error("Error in getRooms", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting rooms");
    }
  };
  /**
   * Get all the sessions for a particular roomId
   * @description - After Creating a room the same room can be used for multiple meetings, all the sessions for a particular room can be fetched using this API
   * @param data - {roomId: string}
   * @returns - List of meetings
   * @throws Error if not able to get the meetings
   */
  getLiveMeetings = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk["live-meetings"].$get({
        query: {
          roomId: data?.roomId
        }
      });
      if (resp.status !== 200) {
        throw new Error("Error getting live meetings");
      }
      const { liveMeetings } = await resp.json();
      return liveMeetings;
    } catch (error) {
      logger.error("Error in getLiveMeetings", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting live meetings");
    }
  };
  // Get the metrics for the Registered HUB
  getMetrics = async () => {
    try {
      const resp = await this.#infraClient.api.v2.sdk.metrics.$get();
      if (resp.status !== 200) {
        throw new Error("Error getting metrics");
      }
      const {
        livestreamCount,
        recordingCount,
        totalMeetings,
        totalDuration,
        totalUsers
      } = await resp.json();
      return {
        livestreamCount,
        recordingCount,
        totalMeetings,
        totalDuration,
        totalUsers
      };
    } catch (error) {
      logger.error("Error in getMetrics", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting metrics");
    }
  };
  // Get the Room Details for the Registered HUB
  getRoomDetails = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk.rooms["room-details"].$get({
        query: {
          roomId: data.roomId
        }
      });
      if (resp.status !== 200) {
        throw new Error("Error getting room details");
      }
      const roomDetails = await resp.json();
      return roomDetails;
    } catch (error) {
      logger.error("Error in getRoomDetails", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting room details");
    }
  };
  /**
   * Get the participants details for a live meeting happening for a roomId
   * @description - Multiple sessions can happen on the same room, this API gives the details of the participants for a latest session
   * @param data - {roomId: string}
   * @returns - List of participants
   */
  getPartipantsDetails = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk["live-meetings"].participants.$get({
        query: {
          roomId: data.roomId
        }
      });
      if (resp.status === 412) {
        throw new Error("No ongoing meeting found for the room and project");
      }
      if (resp.status !== 200) {
        throw new Error("Error getting participants details");
      }
      const { participants } = await resp.json();
      return participants;
    } catch (error) {
      logger.error("Error in liveMeetings", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting live meetings");
    }
  };
  /**
   * Get the list of all the sessions for a particular roomId - Same Room can be used for multiple sessions.
   * @param data - {roomId: string}
   * @returns - List of sessions
   */
  getRoomSessions = async (data) => {
    try {
      const resp = await this.#infraClient.api.v2.sdk.rooms["session-details"].$get({
        query: {
          roomId: data.roomId,
          limit: data.limit?.toString(),
          cursor: data.cursor?.toString()
        }
      });
      if (resp.status !== 200) {
        throw new Error("Error getting room sessions");
      }
      const { sessions } = await resp.json();
      return sessions;
    } catch (error) {
      logger.error("Error in getRoomSessions", error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("Error getting room sessions");
    }
  };
};

exports.API = API;
