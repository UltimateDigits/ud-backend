import "../chunk-VBXJIVYU.js";

// src/validators/api.validators.ts
import { z } from "zod";
var tokenTypeEnum = z.enum([
  "ERC20",
  "ERC721",
  "ERC1155",
  "SPL",
  "BEP20",
  "BEP721",
  "BEP1155",
  "COSMOS",
  "TEZOS",
  "LENS",
  "POAP",
  "CYBERCONNECT"
]);
var chainEnum = z.enum([
  "ETHEREUM",
  "COSMOS",
  "SOLANA",
  "TEZOS",
  "POLYGON",
  "BSC",
  "ARBITRUM",
  "GOERLI"
]);
var tokenGatingConditionEnum = z.enum([
  "COLLECT_POST",
  "FOLLOW_HANDLE",
  "HAVE_HANDLE",
  "MIRROR_POST"
]);
var roomSizeEnum = z.enum(["NORMAL", "LARGE"]);
var roomTypeEnum = z.enum(["VIDEO", "AUDIO"]);
var roomDetailsSchema = z.object({
  roomId: z.string().min(1, {
    message: "Room Id is Necessary"
  }),
  appData: z.record(z.string()).nullable(),
  title: z.string().optional().nullable(),
  description: z.string().min(1).max(100).optional().nullable(),
  meetingLink: z.string().optional(),
  startTime: z.date({
    invalid_type_error: "startTime must be a date"
  }).optional().nullable(),
  expiryTime: z.date({
    invalid_type_error: "expiryTime must be a date"
  }).optional().nullable(),
  videoOnEntry: z.boolean().optional(),
  muteOnEntry: z.boolean().optional(),
  roomLocked: z.boolean().optional(),
  hostWalletAddress: z.array(z.string()).optional(),
  tokenGatingInfo: z.object({
    id: z.string(),
    tokenGatingConditions: z.array(
      z.object({
        id: z.string(),
        tokenType: tokenTypeEnum.optional(),
        chain: chainEnum,
        contractAddress: z.string().nullable(),
        conditionType: tokenGatingConditionEnum.nullable(),
        conditionValue: z.string().nullable()
      })
    )
  }).optional(),
  roomType: roomTypeEnum.default("VIDEO"),
  roomSize: roomSizeEnum.default("NORMAL")
});
var createRoomInputSchema = z.object({
  title: z.string().min(1).max(90),
  appData: z.record(z.string()).optional(),
  description: z.string().min(1).max(150).optional(),
  startTime: z.string().optional(),
  expiryTime: z.string().optional(),
  hostWallets: z.array(z.string()).optional(),
  roomLocked: z.boolean().optional(),
  muteOnEntry: z.boolean().optional(),
  videoOnEntry: z.boolean().optional(),
  roomSize: roomSizeEnum.optional(),
  roomType: roomTypeEnum.optional(),
  tokenType: tokenTypeEnum.optional(),
  contractAddress: z.array(z.string()).optional(),
  chain: chainEnum.optional(),
  conditionType: tokenGatingConditionEnum.optional(),
  conditionValue: z.string().optional()
});
var createRoomDataSchema = z.object({
  message: z.string(),
  data: z.object({
    roomId: z.string().min(1, {
      message: "Room Id is Necessary"
    }),
    meetingLink: z.string().optional()
  })
});
var apiKeyRoomDataSchema = z.object({
  roomId: z.string(),
  meetingLink: z.string(),
  startTime: z.date().nullable(),
  expiryTime: z.date().nullable(),
  roomType: z.enum(["AUDIO", "VIDEO"])
});
var apiKeyRoomsSchema = z.object({
  nextCursor: z.number().nullable(),
  prevCursor: z.number().nullable(),
  current: z.number().nullable(),
  count: z.number(),
  rooms: z.array(apiKeyRoomDataSchema)
});
var apiKeyMetricsSchema = z.object({
  livestreamCount: z.number(),
  recordingCount: z.number(),
  tokenGatedMeetings: z.number(),
  totalMeetings: z.number(),
  totalDuration: z.number(),
  totalUsers: z.number()
});
var liveMeetingsDataSchema = z.object({
  liveMeetings: z.array(
    z.object({
      title: z.string(),
      hostWalletAddress: z.array(z.string()),
      roomId: z.string()
    })
  )
});
var roomMeetingsInputSchema = z.object({
  limit: z.number().min(1).max(20).optional(),
  cursor: z.number().optional(),
  roomId: z.string().optional()
});
var roomMeetingsDataSchema = z.object({
  meetings: z.array(
    z.object({
      meetingId: z.string(),
      startTime: z.number().nullable(),
      endTime: z.number().nullable()
    })
  )
});
var participantList = z.object({
  displayName: z.string(),
  walletAddress: z.string().nullable()
});
var getParticipantsDataSchema = z.object({
  roomId: z.string(),
  hostAddresses: z.array(z.string()),
  duration: z.number().nullable(),
  participants: z.array(participantList)
});
var getParticipantsInputSchema = z.object({
  meetingId: z.string()
});
export {
  apiKeyMetricsSchema,
  apiKeyRoomsSchema,
  createRoomDataSchema,
  createRoomInputSchema,
  getParticipantsDataSchema,
  getParticipantsInputSchema,
  liveMeetingsDataSchema,
  roomDetailsSchema,
  roomMeetingsDataSchema,
  roomMeetingsInputSchema
};
