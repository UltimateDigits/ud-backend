"use strict";Object.defineProperty(exports, "__esModule", {value: true});require('../chunk-AITBUDWZ.cjs');

// src/validators/api.validators.ts
var _zod = require('zod');
var tokenTypeEnum = _zod.z.enum([
  "ERC20",
  "ERC721",
  "ERC1155",
  "SPL",
  "BEP20",
  "BEP721",
  "BEP1155",
  "COSMOS",
  "TEZOS",
  "LENS",
  "POAP",
  "CYBERCONNECT"
]);
var chainEnum = _zod.z.enum([
  "ETHEREUM",
  "COSMOS",
  "SOLANA",
  "TEZOS",
  "POLYGON",
  "BSC",
  "ARBITRUM",
  "GOERLI"
]);
var tokenGatingConditionEnum = _zod.z.enum([
  "COLLECT_POST",
  "FOLLOW_HANDLE",
  "HAVE_HANDLE",
  "MIRROR_POST"
]);
var roomSizeEnum = _zod.z.enum(["NORMAL", "LARGE"]);
var roomTypeEnum = _zod.z.enum(["VIDEO", "AUDIO"]);
var roomDetailsSchema = _zod.z.object({
  roomId: _zod.z.string().min(1, {
    message: "Room Id is Necessary"
  }),
  appData: _zod.z.record(_zod.z.string()).nullable(),
  title: _zod.z.string().optional().nullable(),
  description: _zod.z.string().min(1).max(100).optional().nullable(),
  meetingLink: _zod.z.string().optional(),
  startTime: _zod.z.date({
    invalid_type_error: "startTime must be a date"
  }).optional().nullable(),
  expiryTime: _zod.z.date({
    invalid_type_error: "expiryTime must be a date"
  }).optional().nullable(),
  videoOnEntry: _zod.z.boolean().optional(),
  muteOnEntry: _zod.z.boolean().optional(),
  roomLocked: _zod.z.boolean().optional(),
  hostWalletAddress: _zod.z.array(_zod.z.string()).optional(),
  tokenGatingInfo: _zod.z.object({
    id: _zod.z.string(),
    tokenGatingConditions: _zod.z.array(
      _zod.z.object({
        id: _zod.z.string(),
        tokenType: tokenTypeEnum.optional(),
        chain: chainEnum,
        contractAddress: _zod.z.string().nullable(),
        conditionType: tokenGatingConditionEnum.nullable(),
        conditionValue: _zod.z.string().nullable()
      })
    )
  }).optional(),
  roomType: roomTypeEnum.default("VIDEO"),
  roomSize: roomSizeEnum.default("NORMAL")
});
var createRoomInputSchema = _zod.z.object({
  title: _zod.z.string().min(1).max(90),
  appData: _zod.z.record(_zod.z.string()).optional(),
  description: _zod.z.string().min(1).max(150).optional(),
  startTime: _zod.z.string().optional(),
  expiryTime: _zod.z.string().optional(),
  hostWallets: _zod.z.array(_zod.z.string()).optional(),
  roomLocked: _zod.z.boolean().optional(),
  muteOnEntry: _zod.z.boolean().optional(),
  videoOnEntry: _zod.z.boolean().optional(),
  roomSize: roomSizeEnum.optional(),
  roomType: roomTypeEnum.optional(),
  tokenType: tokenTypeEnum.optional(),
  contractAddress: _zod.z.array(_zod.z.string()).optional(),
  chain: chainEnum.optional(),
  conditionType: tokenGatingConditionEnum.optional(),
  conditionValue: _zod.z.string().optional()
});
var createRoomDataSchema = _zod.z.object({
  message: _zod.z.string(),
  data: _zod.z.object({
    roomId: _zod.z.string().min(1, {
      message: "Room Id is Necessary"
    }),
    meetingLink: _zod.z.string().optional()
  })
});
var apiKeyRoomDataSchema = _zod.z.object({
  roomId: _zod.z.string(),
  meetingLink: _zod.z.string(),
  startTime: _zod.z.date().nullable(),
  expiryTime: _zod.z.date().nullable(),
  roomType: _zod.z.enum(["AUDIO", "VIDEO"])
});
var apiKeyRoomsSchema = _zod.z.object({
  nextCursor: _zod.z.number().nullable(),
  prevCursor: _zod.z.number().nullable(),
  current: _zod.z.number().nullable(),
  count: _zod.z.number(),
  rooms: _zod.z.array(apiKeyRoomDataSchema)
});
var apiKeyMetricsSchema = _zod.z.object({
  livestreamCount: _zod.z.number(),
  recordingCount: _zod.z.number(),
  tokenGatedMeetings: _zod.z.number(),
  totalMeetings: _zod.z.number(),
  totalDuration: _zod.z.number(),
  totalUsers: _zod.z.number()
});
var liveMeetingsDataSchema = _zod.z.object({
  liveMeetings: _zod.z.array(
    _zod.z.object({
      title: _zod.z.string(),
      hostWalletAddress: _zod.z.array(_zod.z.string()),
      roomId: _zod.z.string()
    })
  )
});
var roomMeetingsInputSchema = _zod.z.object({
  limit: _zod.z.number().min(1).max(20).optional(),
  cursor: _zod.z.number().optional(),
  roomId: _zod.z.string().optional()
});
var roomMeetingsDataSchema = _zod.z.object({
  meetings: _zod.z.array(
    _zod.z.object({
      meetingId: _zod.z.string(),
      startTime: _zod.z.number().nullable(),
      endTime: _zod.z.number().nullable()
    })
  )
});
var participantList = _zod.z.object({
  displayName: _zod.z.string(),
  walletAddress: _zod.z.string().nullable()
});
var getParticipantsDataSchema = _zod.z.object({
  roomId: _zod.z.string(),
  hostAddresses: _zod.z.array(_zod.z.string()),
  duration: _zod.z.number().nullable(),
  participants: _zod.z.array(participantList)
});
var getParticipantsInputSchema = _zod.z.object({
  meetingId: _zod.z.string()
});











exports.apiKeyMetricsSchema = apiKeyMetricsSchema; exports.apiKeyRoomsSchema = apiKeyRoomsSchema; exports.createRoomDataSchema = createRoomDataSchema; exports.createRoomInputSchema = createRoomInputSchema; exports.getParticipantsDataSchema = getParticipantsDataSchema; exports.getParticipantsInputSchema = getParticipantsInputSchema; exports.liveMeetingsDataSchema = liveMeetingsDataSchema; exports.roomDetailsSchema = roomDetailsSchema; exports.roomMeetingsDataSchema = roomMeetingsDataSchema; exports.roomMeetingsInputSchema = roomMeetingsInputSchema;
