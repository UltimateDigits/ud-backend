import { z } from 'zod';

declare const roomDetailsSchema: z.ZodObject<{
    roomId: z.ZodString;
    appData: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
    title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    meetingLink: z.ZodOptional<z.ZodString>;
    startTime: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    expiryTime: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    videoOnEntry: z.ZodOptional<z.ZodBoolean>;
    muteOnEntry: z.ZodOptional<z.ZodBoolean>;
    roomLocked: z.ZodOptional<z.ZodBoolean>;
    hostWalletAddress: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tokenGatingInfo: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        tokenGatingConditions: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            tokenType: z.ZodOptional<z.ZodEnum<["ERC20", "ERC721", "ERC1155", "SPL", "BEP20", "BEP721", "BEP1155", "COSMOS", "TEZOS", "LENS", "POAP", "CYBERCONNECT"]>>;
            chain: z.ZodEnum<["ETHEREUM", "COSMOS", "SOLANA", "TEZOS", "POLYGON", "BSC", "ARBITRUM", "GOERLI"]>;
            contractAddress: z.ZodNullable<z.ZodString>;
            conditionType: z.ZodNullable<z.ZodEnum<["COLLECT_POST", "FOLLOW_HANDLE", "HAVE_HANDLE", "MIRROR_POST"]>>;
            conditionValue: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }, {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        tokenGatingConditions: {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }[];
    }, {
        id: string;
        tokenGatingConditions: {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }[];
    }>>;
    roomType: z.ZodDefault<z.ZodEnum<["VIDEO", "AUDIO"]>>;
    roomSize: z.ZodDefault<z.ZodEnum<["NORMAL", "LARGE"]>>;
}, "strip", z.ZodTypeAny, {
    roomId: string;
    roomType: "AUDIO" | "VIDEO";
    appData: Record<string, string> | null;
    roomSize: "NORMAL" | "LARGE";
    title?: string | null | undefined;
    description?: string | null | undefined;
    meetingLink?: string | undefined;
    startTime?: Date | null | undefined;
    expiryTime?: Date | null | undefined;
    videoOnEntry?: boolean | undefined;
    muteOnEntry?: boolean | undefined;
    roomLocked?: boolean | undefined;
    hostWalletAddress?: string[] | undefined;
    tokenGatingInfo?: {
        id: string;
        tokenGatingConditions: {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }[];
    } | undefined;
}, {
    roomId: string;
    appData: Record<string, string> | null;
    title?: string | null | undefined;
    description?: string | null | undefined;
    meetingLink?: string | undefined;
    startTime?: Date | null | undefined;
    expiryTime?: Date | null | undefined;
    videoOnEntry?: boolean | undefined;
    muteOnEntry?: boolean | undefined;
    roomLocked?: boolean | undefined;
    hostWalletAddress?: string[] | undefined;
    tokenGatingInfo?: {
        id: string;
        tokenGatingConditions: {
            contractAddress: string | null;
            chain: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI";
            conditionType: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | null;
            conditionValue: string | null;
            id: string;
            tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
        }[];
    } | undefined;
    roomType?: "AUDIO" | "VIDEO" | undefined;
    roomSize?: "NORMAL" | "LARGE" | undefined;
}>;
declare const createRoomInputSchema: z.ZodObject<{
    title: z.ZodString;
    appData: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    description: z.ZodOptional<z.ZodString>;
    startTime: z.ZodOptional<z.ZodString>;
    expiryTime: z.ZodOptional<z.ZodString>;
    hostWallets: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    roomLocked: z.ZodOptional<z.ZodBoolean>;
    muteOnEntry: z.ZodOptional<z.ZodBoolean>;
    videoOnEntry: z.ZodOptional<z.ZodBoolean>;
    roomSize: z.ZodOptional<z.ZodEnum<["NORMAL", "LARGE"]>>;
    roomType: z.ZodOptional<z.ZodEnum<["VIDEO", "AUDIO"]>>;
    tokenType: z.ZodOptional<z.ZodEnum<["ERC20", "ERC721", "ERC1155", "SPL", "BEP20", "BEP721", "BEP1155", "COSMOS", "TEZOS", "LENS", "POAP", "CYBERCONNECT"]>>;
    contractAddress: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    chain: z.ZodOptional<z.ZodEnum<["ETHEREUM", "COSMOS", "SOLANA", "TEZOS", "POLYGON", "BSC", "ARBITRUM", "GOERLI"]>>;
    conditionType: z.ZodOptional<z.ZodEnum<["COLLECT_POST", "FOLLOW_HANDLE", "HAVE_HANDLE", "MIRROR_POST"]>>;
    conditionValue: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    title: string;
    appData?: Record<string, string> | undefined;
    description?: string | undefined;
    startTime?: string | undefined;
    expiryTime?: string | undefined;
    hostWallets?: string[] | undefined;
    roomLocked?: boolean | undefined;
    muteOnEntry?: boolean | undefined;
    videoOnEntry?: boolean | undefined;
    roomSize?: "NORMAL" | "LARGE" | undefined;
    roomType?: "AUDIO" | "VIDEO" | undefined;
    tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
    contractAddress?: string[] | undefined;
    chain?: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI" | undefined;
    conditionType?: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | undefined;
    conditionValue?: string | undefined;
}, {
    title: string;
    appData?: Record<string, string> | undefined;
    description?: string | undefined;
    startTime?: string | undefined;
    expiryTime?: string | undefined;
    hostWallets?: string[] | undefined;
    roomLocked?: boolean | undefined;
    muteOnEntry?: boolean | undefined;
    videoOnEntry?: boolean | undefined;
    roomSize?: "NORMAL" | "LARGE" | undefined;
    roomType?: "AUDIO" | "VIDEO" | undefined;
    tokenType?: "ERC20" | "ERC721" | "ERC1155" | "SPL" | "BEP20" | "BEP721" | "BEP1155" | "COSMOS" | "TEZOS" | "LENS" | "POAP" | "CYBERCONNECT" | undefined;
    contractAddress?: string[] | undefined;
    chain?: "COSMOS" | "TEZOS" | "ETHEREUM" | "SOLANA" | "POLYGON" | "BSC" | "ARBITRUM" | "GOERLI" | undefined;
    conditionType?: "COLLECT_POST" | "FOLLOW_HANDLE" | "HAVE_HANDLE" | "MIRROR_POST" | undefined;
    conditionValue?: string | undefined;
}>;
declare const createRoomDataSchema: z.ZodObject<{
    message: z.ZodString;
    data: z.ZodObject<{
        roomId: z.ZodString;
        meetingLink: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roomId: string;
        meetingLink?: string | undefined;
    }, {
        roomId: string;
        meetingLink?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        roomId: string;
        meetingLink?: string | undefined;
    };
    message: string;
}, {
    data: {
        roomId: string;
        meetingLink?: string | undefined;
    };
    message: string;
}>;
declare const apiKeyRoomsSchema: z.ZodObject<{
    nextCursor: z.ZodNullable<z.ZodNumber>;
    prevCursor: z.ZodNullable<z.ZodNumber>;
    current: z.ZodNullable<z.ZodNumber>;
    count: z.ZodNumber;
    rooms: z.ZodArray<z.ZodObject<{
        roomId: z.ZodString;
        meetingLink: z.ZodString;
        startTime: z.ZodNullable<z.ZodDate>;
        expiryTime: z.ZodNullable<z.ZodDate>;
        roomType: z.ZodEnum<["AUDIO", "VIDEO"]>;
    }, "strip", z.ZodTypeAny, {
        roomId: string;
        meetingLink: string;
        startTime: Date | null;
        expiryTime: Date | null;
        roomType: "AUDIO" | "VIDEO";
    }, {
        roomId: string;
        meetingLink: string;
        startTime: Date | null;
        expiryTime: Date | null;
        roomType: "AUDIO" | "VIDEO";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    nextCursor: number | null;
    prevCursor: number | null;
    current: number | null;
    count: number;
    rooms: {
        roomId: string;
        meetingLink: string;
        startTime: Date | null;
        expiryTime: Date | null;
        roomType: "AUDIO" | "VIDEO";
    }[];
}, {
    nextCursor: number | null;
    prevCursor: number | null;
    current: number | null;
    count: number;
    rooms: {
        roomId: string;
        meetingLink: string;
        startTime: Date | null;
        expiryTime: Date | null;
        roomType: "AUDIO" | "VIDEO";
    }[];
}>;
declare const apiKeyMetricsSchema: z.ZodObject<{
    livestreamCount: z.ZodNumber;
    recordingCount: z.ZodNumber;
    tokenGatedMeetings: z.ZodNumber;
    totalMeetings: z.ZodNumber;
    totalDuration: z.ZodNumber;
    totalUsers: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    livestreamCount: number;
    recordingCount: number;
    tokenGatedMeetings: number;
    totalMeetings: number;
    totalDuration: number;
    totalUsers: number;
}, {
    livestreamCount: number;
    recordingCount: number;
    tokenGatedMeetings: number;
    totalMeetings: number;
    totalDuration: number;
    totalUsers: number;
}>;
declare const liveMeetingsDataSchema: z.ZodObject<{
    liveMeetings: z.ZodArray<z.ZodObject<{
        title: z.ZodString;
        hostWalletAddress: z.ZodArray<z.ZodString, "many">;
        roomId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roomId: string;
        title: string;
        hostWalletAddress: string[];
    }, {
        roomId: string;
        title: string;
        hostWalletAddress: string[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    liveMeetings: {
        roomId: string;
        title: string;
        hostWalletAddress: string[];
    }[];
}, {
    liveMeetings: {
        roomId: string;
        title: string;
        hostWalletAddress: string[];
    }[];
}>;
declare const roomMeetingsInputSchema: z.ZodObject<{
    limit: z.ZodOptional<z.ZodNumber>;
    cursor: z.ZodOptional<z.ZodNumber>;
    roomId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit?: number | undefined;
    cursor?: number | undefined;
    roomId?: string | undefined;
}, {
    limit?: number | undefined;
    cursor?: number | undefined;
    roomId?: string | undefined;
}>;
declare const roomMeetingsDataSchema: z.ZodObject<{
    meetings: z.ZodArray<z.ZodObject<{
        meetingId: z.ZodString;
        startTime: z.ZodNullable<z.ZodNumber>;
        endTime: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        startTime: number | null;
        meetingId: string;
        endTime: number | null;
    }, {
        startTime: number | null;
        meetingId: string;
        endTime: number | null;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    meetings: {
        startTime: number | null;
        meetingId: string;
        endTime: number | null;
    }[];
}, {
    meetings: {
        startTime: number | null;
        meetingId: string;
        endTime: number | null;
    }[];
}>;
declare const getParticipantsDataSchema: z.ZodObject<{
    roomId: z.ZodString;
    hostAddresses: z.ZodArray<z.ZodString, "many">;
    duration: z.ZodNullable<z.ZodNumber>;
    participants: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        walletAddress: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        displayName: string;
        walletAddress: string | null;
    }, {
        displayName: string;
        walletAddress: string | null;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    roomId: string;
    hostAddresses: string[];
    duration: number | null;
    participants: {
        displayName: string;
        walletAddress: string | null;
    }[];
}, {
    roomId: string;
    hostAddresses: string[];
    duration: number | null;
    participants: {
        displayName: string;
        walletAddress: string | null;
    }[];
}>;
declare const getParticipantsInputSchema: z.ZodObject<{
    meetingId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    meetingId: string;
}, {
    meetingId: string;
}>;

export { apiKeyMetricsSchema, apiKeyRoomsSchema, createRoomDataSchema, createRoomInputSchema, getParticipantsDataSchema, getParticipantsInputSchema, liveMeetingsDataSchema, roomDetailsSchema, roomMeetingsDataSchema, roomMeetingsInputSchema };
