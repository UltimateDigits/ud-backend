type WebhookEvents = {
    'meeting:started': [
        data: {
            sessionId: string;
            roomId: string;
            createdAt: number;
        }
    ];
    'meeting:ended': [
        data: {
            sessionId: string;
            roomId: string;
            createdAt: number;
            endedAt: number;
            duration: number;
            participants: number;
            maxParticipants: number;
        }
    ];
    'peer:joined': [
        data: {
            id: string;
            sessionId: string;
            roomId: string;
            joinedAt: number;
            metadata?: string;
            role?: string;
            browser: {
                name?: string;
                version?: string;
            };
            device: {
                model?: string;
                type?: string;
                vendor?: string;
            };
        }
    ];
    'peer:left': [
        data: {
            id: string;
            sessionId: string;
            roomId: string;
            leftAt: number;
            duration: number;
            metadata?: string;
            role?: string;
        }
    ];
    'peer:trackPublished': [data: {
        id: string;
        track: string;
    }];
    'peer:trackUnpublished': [data: {
        id: string;
        track: string;
    }];
    'recording:started': [data: Recording];
    'recording:ended': [data: Recording];
    'recording:updated': [data: Recording];
};
type Recording = {
    id: string;
    roomId: string;
    sessionId: string;
    files: {
        duration: number;
        size: number;
        filename: string;
        location: string;
    }[];
    streams: {
        duration: number;
        url: string;
        startedAt: number;
        endedAt: number;
    }[];
    cid?: string;
    ipfsUrl?: string;
};

export type { WebhookEvents };
