import { GetRecordingsInputSchema } from '../types/recorder.types.js';
import { TRecordingType } from 'types/dist/common.types';
import 'zod';
import '../validators/recorder.validators.js';

type CustomStorageOptions = {
    s3?: {
        accessKey: string;
        secret: string;
        region: string;
        bucket: string;
    };
    gcp?: {
        bucket: string;
        credentials: string;
    };
    azure?: {
        accountKey: string;
        accountName: string;
        containerName: string;
    };
};
type CustomWatermark = {
    url?: string;
    position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    size?: {
        width: number;
        height: number;
    };
};
type webOptions = {
    audioOnly?: boolean;
    videoOnly?: boolean;
};
declare class Recorder {
    private readonly projectId;
    private readonly apiKey;
    private readonly url;
    constructor(projectId: string, apiKey: string);
    startRecording(data: {
        roomId: string;
        token: string;
        customLayoutUrl?: string;
        customStorage?: CustomStorageOptions;
        layout?: 'grid' | 'spotlight';
        watermark?: CustomWatermark;
        pinToIpfs?: boolean;
        /**
         * @description
         * - If audioOnly is true, video will not be recorded
         * - If videoOnly is true, audio will not be recorded
         * - If both are true, an error will be thrown
         */
        options?: webOptions;
    }): Promise<{
        msg: string;
    }>;
    startLivestream(data: {
        roomId: string;
        token: string;
        rtmpUrls: string[];
        customLayoutUrl?: string;
        customStorage?: CustomStorageOptions;
        recordLivestream?: boolean;
    }): Promise<{
        msg: string;
    }>;
    stop(data: {
        roomId: string;
    }): Promise<{
        msg: string;
        type: TRecordingType;
    }>;
    getRecordingStatus(data: {
        roomId: string;
    }): Promise<{
        status: "ongoing" | "stopped";
        startTime?: number | undefined;
        type?: "recording" | "livestream" | undefined;
    }>;
    getRecordings(data?: GetRecordingsInputSchema): Promise<{
        data: {
            nextCursor: number | null;
            recordings: {
                id: string;
                recordingUrl: string;
                recordingSize: number;
            }[];
        };
        error?: undefined;
    } | {
        data: null;
        error: Error;
    }>;
}

export { type CustomStorageOptions, type CustomWatermark, Recorder, type webOptions };
