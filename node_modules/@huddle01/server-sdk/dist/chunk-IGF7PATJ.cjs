"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/webhooks/WebhookReceiver.ts
var _crypto = require('crypto'); var _crypto2 = _interopRequireDefault(_crypto);
var WebhookReceiver = class {
  #config;
  constructor(config) {
    this.#config = config;
  }
  receive(body, header) {
    const timestamp = _optionalChain([header, 'optionalAccess', _ => _.split, 'call', _2 => _2(","), 'access', _3 => _3[0], 'optionalAccess', _4 => _4.split, 'call', _5 => _5("="), 'optionalAccess', _6 => _6[1]]);
    const signature = _optionalChain([header, 'optionalAccess', _7 => _7.split, 'call', _8 => _8(","), 'access', _9 => _9[1]]);
    if (!timestamp || !signature)
      throw new Error("Invalid headers");
    let data;
    if (typeof body === "string")
      data = JSON.parse(body);
    else if (typeof body === "object")
      data = body;
    else
      throw new Error("Invalid body");
    if (!data.id)
      throw new Error("Invalid body");
    const hashPayload = `${data.id}.${timestamp}.${JSON.stringify(data)}`;
    const signatureAlgorithm = signature.split("=")[0];
    if (!signatureAlgorithm)
      throw new Error("Invalid signature algorithm");
    const hmac = _crypto2.default.createHmac(signatureAlgorithm, this.#config.apiKey);
    const digest = Buffer.from(
      `${signatureAlgorithm}=${hmac.update(hashPayload).digest("hex")}`,
      "utf8"
    );
    const providerSig = Buffer.from(signature, "utf8");
    if (providerSig.length !== digest.length || !_crypto2.default.timingSafeEqual(digest, providerSig)) {
      throw new Error("Invalid signature");
    }
    return data;
  }
  /**
   * Helper function to create a typed webhook data object
   */
  createTypedWebhookData(event, data) {
    return { event, data };
  }
};



exports.WebhookReceiver = WebhookReceiver;
